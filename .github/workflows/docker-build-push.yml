name: Docker Build and Push

on:
  push:
    branches: [ 'main', 'feature/**' ]
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'tests/**'
      - 'docker-compose.yml'
  release:
    types: [published]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  MONOLITH_IMAGE_NAME: ${{ github.repository }}/monolith
  MOVIES_SERVICE_IMAGE_NAME: ${{ github.repository }}/movies-service
  EVENTS_SERVICE_IMAGE_NAME: ${{ github.repository }}/events-service
  PROXY_SERVICE_IMAGE_NAME: ${{ github.repository }}/proxy-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          - name: monolith
            path: ./src/monolith
          - name: movies-service
            path: ./src/microservices/movies
          - name: proxy-service
            path: ./src/microservices/proxy
          - name: events-service
            path: ./src/microservices/events

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service.name }}
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  api-tests:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create docker-compose override file
        run: |
          IMAGE_TAG=${{ github.sha }}
          REPO=${{ github.repository }}
          REGISTRY=${{ env.REGISTRY }}
          cat <<EOF > docker-compose.override.yml
          version: '3.8'
          services:
            monolith:
              image: \${REGISTRY}/\${REPO}/monolith:\${IMAGE_TAG}
            movies-service:
              image: \${REGISTRY}/\${REPO}/movies-service:\${IMAGE_TAG}
            proxy-service:
              image: \${REGISTRY}/\${REPO}/proxy-service:\${IMAGE_TAG}
            events-service:
              image: \${REGISTRY}/\${REPO}/events-service:\${IMAGE_TAG}
          EOF
          
          echo "Generated docker-compose.override.yml:"
          cat docker-compose.override.yml

      - name: Start services using Docker Compose
        run: docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting 30 seconds for all services to initialize..."
          sleep 30

      - name: Run API tests with Newman
        run: |
          cd tests/postman
          npm install
          npm run test:docker

      - name: Stop services
        if: always()
        run: docker-compose down